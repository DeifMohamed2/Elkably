<!DOCTYPE html>
<html lang="ar" dir="rtl">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Register</title>
  <link rel="icon" href="images/d.png" type="image/x-icon">

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
  <link rel="stylesheet" href="/assest/bootstrap.min.css">
  <link rel="stylesheet" href="https://unicons.iconscout.com/release/v2.1.6/css/unicons.css">

  <link rel="stylesheet" href="/css/main.css">
  <link rel="stylesheet" href="/css/Register.css">
</head>


<style>
  .verificationCode{
  
    width: 130px !important; 
  }

  .verificationBTN {
    background-color: #ffd900;
    border: none;
    color: rgb(0, 0, 0);
    padding: 10px 15px;
    border-radius: 20px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    margin: 4px 2px;
    cursor: pointer;
    transition: all ease 0.3s  ;
  }
  .verificationBTN:hover {
    background-color: #f1f1f1;
  }
  .verificationBTN:disabled
  {
    opacity: 0.4;
    background-color: #f1f1f1;
    cursor: not-allowed;
  }

</style>
<body>

  <%- include("./partials/nav.ejs") %>


    <!-- Modal -->


    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <div class="success-animation ">
              <svg class="checkmark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52">
                <circle class="checkmark__circle" cx="26" cy="26" r="25" fill="none" />
                <path class="checkmark__check" fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8" />
              </svg>
            </div>
          </div>
          <div class="modal-body text-center " style="color: black;">
            <h3>تم ارسال طلبك بنجاح!</h3>
            <h4> هذا هوا الكود الخاص بك يرجي الاحتفاظ به جيداً</h4>
            <span style="font-size: 2rem; "> <b>#</b><b id="student_id"></b> </span>
          </div>
          
          <div class="modal-footer mx-auto">
            <a href="login"><button type="button" class="btn btn-primary" data-bs-dismiss="modal" id="copyCode"> حسنا
              </button></a>
          </div>
          </div>
     
        </div>
      </div>
    </div>



    <section class="contact">

      <div class="container contact__container">

        <button type="button" style="display: none;" id="modelbtn" class="btn btn-primary" data-bs-toggle="modal"
          data-bs-target="#exampleModal">
          Launch demo modal
        </button>

      


        <form action="/Register" method="post" class="contact__form ">
          <% if (typeof errors !=='undefined' ) { %>
            <ul class="errors">
              <% for (const key in errors) { %>
                <li class="erorr">
                  <%= errors[key] %>
                </li>
                <% } %>


            </ul>
            <% } %>

              <div class="row  justify-content-center align-items-center">

                <div class="col-12 text-center ">
                  <input type="text" name="Username" placeholder=" اسم الطالب بالكامل"
                    value="<%= formData.Username || '' %>" required>
                </div>
                

                <div class="col-12 text-center">
                  <input type="number" name="phone" id="phone" placeholder="رقم هاتف الطالب" required>

                  <h5 class="text-warning">ده الرقم الي هتعمل بيه تسجيل دخول</h5>
                  <h5 class="text-warning">لازم الرقم يكون عليه واتساب</h5>
          

                  <!-- <button type="button" class="verificationBTN" id="verificationBTN" onclick="sendVerificationCode()">ارسال كود تأكيد</button>
                   <input type="number" class="verificationCode"  name="verificationCode" id="verificationCode" placeholder="كود التفعيل" required>
           -->
                </div>

                

      
         
                <div class="col-12 text-center">
                  <input type="number" name="parentPhone" id="parentPhone"
                    placeholder=" رقم هاتف ولي الامر " value="<%= formData.parentPhone || '' %>" required>
                </div>
            
        <div class="col-12 text-center">
                    <select name="centerName" id="centerName" value="<%= formData.centerName || '' %>" required>
                      <option value=""> اختر السنتر </option>
                      <option value="GTA">GTA</option>
                      <option value="tagmo3">Tagmo3</option>
                    </select>
          </div>

                  <div class="col-12 text-center">
              <select name="Grade" id="Grade" class="regSel" value="<%= formData.Grade || '' %>" required>
                <option value=""> اختر الصف </option>
                <option value="EST">EST</option>
                <option value="EST1">EST1</option>
                <option value="EST2">EST2</option>
                <option value="ACT">ACT</option>
              </select>
                  </div>

                  

                  <div class="col-12 text-center">
                    <select name="gradeType" id="gradeType" value="<%= formData.centerName || '' %>" required>
                      <option value=""> Type</option>
                    </select>
                  </div>

                  
          
                 

                  <div class="col-12 text-center">
                    <select name="groupTime" id="groupTime" value="<%= formData.groupTime || '' %>" required>
                      <option value=""> Group Time </option>
                    </select>
                  </div>

                  <div class="col-4 text-center">
                  <input type="number" name="balance" id="balance"
                    placeholder="Amount" value="<%= formData.balance || '' %>" required>
                </div>

             
               
                <div class="col-12 text-center">
                  <button type="submit" class="btn btn-primary"> ارسال طلب</button><label><span>

                </div>
              </div>


 
        </form>
      </div>
    </section>

    <%- include("./partials/footer.ejs") %>


      <script src="/assest/bootstrap.min.js"></script>
      <script src="/assest/bootstrap.bundle.min.js"></script>



<script>

  const centerNames = {
    GTA : [
    { value: 'EST1', text: 'EST1' },
    { value: 'EST2', text: 'EST2' },
    { value: 'ACT', text: 'ACT' }
    ],
    tagmo3 :[
    { value: 'EST', text: 'EST' },

    { value: 'ACT', text: 'ACT' }
    ]
  }

  // Define centers for each grade
const gradeTypeOptions = {
  EST :[
    { value: 'adv', text: 'Advanced' },
    { value: 'basic', text: 'Basic' }
  ],
  EST1: [
    { value: 'adv', text: 'Advanced' },
    { value: 'basic', text: 'Basic' }
  ],
  EST2: [
    { value: 'normal', text: 'Normal' }
  ],
  ACT: [
    { value: 'normal', text: 'Normal' }
  ]
};

// Group times for each center
const groupTimes = {
  GTA: {
    EST1: {
      adv: [
        { value: 'group1', text: 'Group(1) - Saturday @ 6PM' }, 
        { value: 'group2', text: 'Group(1)(2) - Tuesday @ 6PM' },
        { value: 'group3', text: 'Group(2) - Sunday @ 1PM' },
        { value: 'group4', text: 'Group(2)(2) - Tuesday @ 1PM' },
        { value: 'group5', text: 'Group(3) - Saturday @ 3:30PM' },
        { value: 'group6', text: 'Group(3)(2) - Wednesday @ 4PM' },

      ],
      basic: [
        { value: 'group1', text: "Group(1) - Saturday @ 8PM" },
        { value: 'group2', text: "Group(1)(2) - Tuesday @ 8PM" }
      ]
    },
    EST2: {
      normal: [
        { value: 'group1', text: "Group(1) - Saturday @ 3:30PM" },
        { value: 'group2', text: "Group(1)(2) - Wednesday @ 8PM" }
      ]
    },
    ACT: {
      normal: [
        { value: 'group1', text: "Group(1) - Sunday @ 7PM" },
        { value: 'group2', text: "Group(1)(2) - Wednesday @ 6PM" },
       
      ]
    }
  },
  tagmo3: {
    EST: {
      adv: [
        { value: 'group1', text: "Group(1) - Monday @ 6PM" },
        { value: 'group2', text: "Group(1)(2) - Friday @ 5PM" },
        { value: 'group3', text: "Group(2) - Sunday @ 4PM" },
        { value: 'group4', text: "Group(2)(1) - Thursday @ 5PM" },
  
      ],
      basic :[
       { value: 'group1', text: "Group(1) - Monday @ 8PM" },
       { value: 'group2', text: "Group(1)(2) - Friday @ 7PM" },
      ],
  
    },
    ACT: {
      normal: [
      { value: 'group1', text: "Group(1) - Monday @ 4PM" },
      { value: 'group2', text: "Group(1)(2) - Friday @ 2:30PM" },
      ],
    }
  }
};


document.getElementById('centerName').addEventListener('change', ()=>{
   const centerName = document.getElementById('centerName').value;
  const Grade = document.getElementById('Grade');
 
  // Clear existing grade type options
  Grade.innerHTML = '<option value="" selected>Select Grade</option>';
   console.log(centerName ,centerNames[centerName] )
  // Add new grade type options based on the selected grade
  if (centerNames[centerName]) {
    centerNames[centerName].forEach(center => {
      const option = document.createElement('option');
      option.value = center.value;
      option.textContent = center.text;
      Grade.appendChild(option);
    });
  }

  // Clear the group time options whenever the grade changes
  document.getElementById('gradeType').innerHTML = '<option value="" selected>Type</option>';
});
// Handle grade change
document.getElementById('Grade').addEventListener('change', function() {
  const selectedGrade = this.value;
  const gradeType = document.getElementById('gradeType');
  
  // Clear existing grade type options
  gradeType.innerHTML = '<option value="" selected>Type</option>';

  // Add new grade type options based on the selected grade
  if (gradeTypeOptions[selectedGrade]) {
    gradeTypeOptions[selectedGrade].forEach(center => {
      const option = document.createElement('option');
      option.value = center.value;
      option.textContent = center.text;
      gradeType.appendChild(option);
    });
  }

  // Clear the group time options whenever the grade changes
  document.getElementById('groupTime').innerHTML = '<option value="" selected>Group Time</option>';
});

// Handle center name change and update group times
function updateGroupTimes() {
  const selectedCenter = document.getElementById('centerName').value;
  const selectedGrade = document.getElementById('Grade').value;
  const selectedGradeType = document.getElementById('gradeType').value;
  const groupTime = document.getElementById('groupTime');

  // Clear existing group time options
  groupTime.innerHTML = '<option value="" selected>Group Time</option>';

  // Check if the selected center exists
  if (!groupTimes[selectedCenter]) {
    console.error(`Center "${selectedCenter}" is not found in groupTimes`);
    return;
  }

  // Check if the selected grade exists for the center
  if (!groupTimes[selectedCenter][selectedGrade]) {
    console.error(`Grade "${selectedGrade}" is not found for center "${selectedCenter}"`);
    return;
  }

  // Check if the selected grade type exists for the grade in the center
  if (!groupTimes[selectedCenter][selectedGrade][selectedGradeType]) {
    console.error(`Grade type "${selectedGradeType}" is not found for grade "${selectedGrade}" in center "${selectedCenter}"`);
    return;
  }

  // Add new group times based on selected center, grade, and gradeType
  groupTimes[selectedCenter][selectedGrade][selectedGradeType].forEach(group => {
    const option = document.createElement('option');
    option.value = group.value;
    option.textContent = group.text;
    groupTime.appendChild(option);
  });
}

// Add event listeners to update group times when the center, grade, or grade type changes
document.getElementById('Grade').addEventListener('change', updateGroupTimes);
document.getElementById('gradeType').addEventListener('change', updateGroupTimes);

</script>



</body>

</html>